declare module 'fs/promises' {
    import {
        Stats,
        BigIntStats,
        StatOptions,
        WriteVResult,
        ReadVResult,
        PathLike,
        RmDirOptions,
        RmOptions,
        MakeDirectoryOptions,
        Dirent,
        OpenDirOptions,
        Dir,
        BaseEncodingOptions,
        BufferEncodingOption,
        OpenMode,
        Mode,
        Abortable,
    } from 'fs';

    interface FileHandle {
        readonly fd: number;

        appendFile(data: string | Uint8Array, options?: BaseEncodingOptions & { mode?: Mode, flag?: OpenMode } | BufferEncoding | null): Promise<void>;

        chown(uid: number, gid: number): Promise<void>;

        chmod(mode: Mode): Promise<void>;

        datasync(): Promise<void>;

        sync(): Promise<void>;

        read<TBuffer extends Uint8Array>(buffer: TBuffer, offset?: number | null, length?: number | null, position?: number | null): Promise<{ bytesRead: number, buffer: TBuffer }>;

        readFile(options?: { encoding?: null, flag?: OpenMode } | null): Promise<Buffer>;

        readFile(options: { encoding: BufferEncoding, flag?: OpenMode } | BufferEncoding): Promise<string>;

        readFile(options?: BaseEncodingOptions & { flag?: OpenMode } | BufferEncoding | null): Promise<string | Buffer>;

        stat(opts?: StatOptions & { bigint?: false }): Promise<Stats>;
        stat(opts: StatOptions & { bigint: true }): Promise<BigIntStats>;
        stat(opts?: StatOptions): Promise<Stats | BigIntStats>;

        truncate(len?: number): Promise<void>;

        utimes(atime: string | number | Date, mtime: string | number | Date): Promise<void>;

        write<TBuffer extends Uint8Array>(buffer: TBuffer, offset?: number | null, length?: number | null, position?: number | null): Promise<{ bytesWritten: number, buffer: TBuffer }>;

        write(data: string | Uint8Array, position?: number | null, encoding?: BufferEncoding | null): Promise<{ bytesWritten: number, buffer: string }>;

        writeFile(data: string | Uint8Array, options?: BaseEncodingOptions & { mode?: Mode, flag?: OpenMode } & Abortable | BufferEncoding | null): Promise<void>;

        writev(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<WriteVResult>;

        readv(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<ReadVResult>;

        close(): Promise<void>;
    }

    function access(path: PathLike, mode?: number): Promise<void>;

    function copyFile(src: PathLike, dest: PathLike, flags?: number): Promise<void>;

    function open(path: PathLike, flags: string | number, mode?: Mode): Promise<FileHandle>;

    function read<TBuffer extends Uint8Array>(
        handle: FileHandle,
        buffer: TBuffer,
        offset?: number | null,
        length?: number | null,
        position?: number | null,
    ): Promise<{ bytesRead: number, buffer: TBuffer }>;

    function write<TBuffer extends Uint8Array>(
        handle: FileHandle,
        buffer: TBuffer,
        offset?: number | null,
        length?: number | null, position?: number | null): Promise<{ bytesWritten: number, buffer: TBuffer }>;

    function write(handle: FileHandle, string: string, position?: number | null, encoding?: BufferEncoding | null): Promise<{ bytesWritten: number, buffer: string }>;

    function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;

    function truncate(path: PathLike, len?: number): Promise<void>;

    function ftruncate(handle: FileHandle, len?: number): Promise<void>;

    function rmdir(path: PathLike, options?: RmDirOptions): Promise<void>;

    function rm(path: PathLike, options?: RmOptions): Promise<void>;

    function fdatasync(handle: FileHandle): Promise<void>;

    function fsync(handle: FileHandle): Promise<void>;

    function mkdir(path: PathLike, options: MakeDirectoryOptions & { recursive: true; }): Promise<string | undefined>;

    function mkdir(path: PathLike, options?: Mode | (MakeDirectoryOptions & { recursive?: false; }) | null): Promise<void>;

    function mkdir(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;

    function readdir(path: PathLike, options?: BaseEncodingOptions & { withFileTypes?: false } | BufferEncoding | null): Promise<string[]>;

    function readdir(path: PathLike, options: { encoding: "buffer"; withFileTypes?: false } | "buffer"): Promise<Buffer[]>;

    function readdir(path: PathLike, options?: BaseEncodingOptions & { withFileTypes?: false } | BufferEncoding | null): Promise<string[] | Buffer[]>;

    function readdir(path: PathLike, options: { encoding?: string | null; withFileTypes?: false } | string | null): Promise<string[] | Buffer[]>;

    function readdir(path: PathLike, options: { withFileTypes: true } | null): Promise<Dirent[]>;

    function opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>;

    function readFile(path: PathLike | number, options: { encoding: BufferEncoding, flag?: OpenMode } | BufferEncoding): Promise<string>;

    function readFile(path: PathLike | number, options?: { encoding?: string | null, flag?: OpenMode } | string | null): Promise<string | Buffer>;

    function readFile(path: PathLike | number, options?: { flag?: OpenMode }): Promise<Buffer>;

    function symlink(target: PathLike, path: PathLike, type?: fs.symlink.Type): Promise<void>;

    function link(existingPath: PathLike, newPath: PathLike): Promise<void>;

    function unlink(path: PathLike): Promise<void>;

    function fstat(handle: FileHandle): Promise<Stats>;

    function lstat(path: PathLike): Promise<Stats>;

    function stat(path: PathLike): Promise<Stats>;

    function fchmod(handle: FileHandle, mode: Mode): Promise<void>;

    function lchmod(path: PathLike, mode: Mode): Promise<void>;

    function chmod(path: PathLike, mode: Mode): Promise<void>;

    function lutimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;

    function realpath(path: PathLike, options?: BaseEncodingOptions & { encoding: 'buffer' } | BufferEncoding | null): Promise<string | Buffer>;

    function realpath(path: PathLike, options?: BaseEncodingOptions & { encoding?: string | null } | string | null): Promise<string>;

    function realpath(path: PathLike, options?: BaseEncodingOptions | BufferEncoding | string | null): Promise<string>;

    function realpath.native(path: PathLike, options?: BaseEncodingOptions & { encoding: 'buffer' } | BufferEncoding | null): Promise<string | Buffer>;

    function realpath.native(path: PathLike, options?: BaseEncodingOptions & { encoding?: string | null } | string | null): Promise<string>;

    function realpath.native(path: PathLike, options?: BaseEncodingOptions | BufferEncoding | string | null): Promise<string>;

    function unlink(path: PathLike): Promise<void>;

    function fchmod(handle: FileHandle, mode: Mode): Promise<void>;

    function lchmod(path: PathLike, mode: Mode): Promise<void>;

    function chmod(path: PathLike, mode: Mode): Promise<void>;

    function lutimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;

    function realpath(path: PathLike, options?: BaseEncodingOptions & { encoding: 'buffer' } | BufferEncoding | null): Promise<string | Buffer>;

    function realpath(path: PathLike, options?: BaseEncodingOptions & { encoding?: string | null } | string | null): Promise<string>;

    function realpath(path: PathLike, options?: BaseEncodingOptions | BufferEncoding | string | null): Promise<string>;

    function realpath.native(path: PathLike, options?: BaseEncodingOptions & { encoding: 'buffer' } | BufferEncoding | null): Promise<string | Buffer>;

    function realpath.native(path: PathLike, options?: BaseEncodingOptions & { encoding?: string | null } | string | null): Promise<string>;

    function realpath.native(path: PathLike, options?: BaseEncodingOptions | BufferEncoding | string | null): Promise<string>;

    export {
        access,
        copyFile,
        open,
        opendir,
        readdir,
        readFile,
        read,
        write,
        writeFile,
        appendFile,
        rename,
        truncate,
        ftruncate,
        rmdir,
        rm,
        fdatasync,
        fsync,
        mkdir,
        symlink,
        link,
        unlink,
        fstat,
        lstat,
        stat,
        fchmod,
        lchmod,
        chmod,
        lutimes,
        realpath,
    };

    export type { FileHandle };
}
